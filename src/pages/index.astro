<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content="Welcome to the Ronin hacking blog: exploits, red teaming insights, and cyber missions." />
  <title>H4ckronin Red Teaming</title>
  <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;600&display=swap" rel="stylesheet">

  <style>
    :root {
      --bg-color: #0b0b0b;
      --fg-color: #e6e0d6;
      --accent-color: #d4b78c;
      --card-bg: rgba(17,17,17,0.85);
      --border-color: #222;
      --scanline: rgba(255,255,255,0.02);
    }
    [data-theme="light"] {
      --bg-color: #f7f5f0;
      --fg-color: #111;
      --accent-color: #8b6b34;
      --card-bg: #fff;
      --border-color: #ddd;
      --scanline: rgba(0,0,0,0.03);
    }

    body {
      margin: 0;
      font-family: 'Fira Code', monospace;
      background: linear-gradient(135deg, var(--bg-color) 0%, #1c1c1c 100%);
      color: var(--fg-color);
      overflow-x: hidden;
      transition: background 0.3s, color 0.3s;
    }

    /* Top Navigation Bar */
    header {
      width: 100%;
      padding: 1rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid var(--border-color);
      background: rgba(0,0,0,0.5);
      position: sticky;
      top: 0;
      z-index: 50;
    }

    header .logo {
      font-size: 1.2rem;
      font-weight: 600;
      color: var(--accent-color);
      text-decoration: none;
    }

    header nav a {
      margin-left: 1.5rem;
      color: var(--fg-color);
      text-decoration: none;
      transition: color 0.3s;
    }

    header nav a:hover {
      color: var(--accent-color);
    }

    .theme-toggle {
      background: none;
      border: 1px solid var(--accent-color);
      border-radius: 4px;
      padding: 4px 10px;
      color: var(--accent-color);
      cursor: pointer;
      font-family: inherit;
      transition: background 0.3s, color 0.3s;
    }
    .theme-toggle:hover {
      background: var(--accent-color);
      color: var(--bg-color);
    }

    /* Scanline overlay */
    body::before {
      content: "";
      position: fixed;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      background: repeating-linear-gradient(
        var(--scanline) 0px,
        var(--scanline) 1px,
        transparent 1px,
        transparent 3px
      );
      pointer-events: none;
      z-index: 10;
    }

    /* Container */
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      padding: 2rem;
      text-align: center;
      position: relative;
      z-index: 20;
    }

    /* Glitch Heading */
    h1.glitch {
      font-size: 3rem;
      font-weight: 600;
      color: var(--fg-color);
      position: relative;
      text-shadow: 0 0 2px #fff5e6, 0 0 5px #fff5e6, 0 0 10px var(--accent-color);
    }
    .glitch::before,
    .glitch::after {
      content: attr(data-text);
      position: absolute;
      left: 0;
    }
    .glitch::before {
      text-shadow: 1px 0 var(--accent-color), -1px 0 var(--fg-color);
      animation: glitchTop 1s infinite linear alternate-reverse;
    }
    .glitch::after {
      text-shadow: 1px 0 var(--fg-color), -1px 0 var(--accent-color);
      animation: glitchBottom 1s infinite linear alternate-reverse;
    }

    @keyframes glitchTop {
      0%,50%,100%{transform: translate(0);}
      10%{transform: translate(-2px,-2px);}
      20%{transform: translate(2px,2px);}
    }
    @keyframes glitchBottom {
      0%,50%,100%{transform: translate(0);}
      10%{transform: translate(2px,2px);}
      20%{transform: translate(-2px,-1px);}
    }

    .modules-grid {
      margin-top: 3rem;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
      gap: 1.5rem;
      width: 100%;
      max-width: 1000px;
      position: relative;
    }

    .module-card {
      background: var(--card-bg);
      border-radius: 6px;
      padding: 1rem;
      text-align: left;
      border: 2px solid var(--border-color);
      box-shadow: 0 0 15px rgba(212,183,140,0.2);
      transition: transform 0.3s, box-shadow 0.3s, border-color 0.3s;
    }
    .module-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 0 25px var(--accent-color);
      border-color: var(--accent-color);
    }
    .module-card h3 {
      margin-top: 0;
      color: var(--accent-color);
    }
    .module-card p {
      color: var(--fg-color);
      opacity: 0.8;
    }
    .launch-link {
      display: inline-block;
      margin-top: 0.8rem;
      padding: 5px 10px;
      border: 1px solid var(--accent-color);
      border-radius: 4px;
      font-size: 0.9rem;
      color: var(--accent-color);
      text-decoration: none;
    }
    .launch-link:hover {
      background: var(--accent-color);
      color: var(--bg-color);
    }

    /* Loading Screen */
    #loading-screen {
      position: fixed;
      top:0; left:0;
      width:100%; height:100%;
      background: var(--bg-color);
      color: var(--accent-color);
      font-family:'Fira Code', monospace;
      display:flex;
      justify-content:center;
      align-items:center;
      flex-direction:column;
      white-space:pre-wrap;
      z-index:1000;
    }

    .cursor {
      display: inline-block;
      margin-left: 2px;
      color: var(--accent-color);
      text-shadow: 0 0 2px #fff5e6;
      animation: blink 1s steps(2, start) infinite;
    }
    @keyframes blink { to { visibility: hidden; } }
  </style>
</head>
<body>
  <!-- Loading Screen -->
  <div id="loading-screen">
    <pre id="terminal-output"></pre>
  </div>

  <!-- Top Bar -->
  <header>
    <a href="/" class="logo">H4ckronin</a>
    <nav>
      <a href="/">Home</a>
      <a href="/blog">Blog</a>
      <a href="/about">About</a>
    </nav>
    <button id="theme-toggle" class="theme-toggle">🌙</button>
  </header>

  <!-- Main Content -->
  <div class="container" style="visibility:hidden;">
    <h1 class="glitch" data-text="H4ckronin">H4ckronin</h1>
    <div class="modules-grid">
      <div class="module-card">
        <h3>Havoc Module</h3>
        <p>Deep dive into advanced red teaming strategies and simulated attacks.</p>
        <a href="/blog/havoc-module" class="launch-link">Launch</a>
      </div>
      <div class="module-card">
        <h3>Mythic-Lite</h3>
        <p>Learn the lighter, portable exploits inspired by C2 frameworks.</p>
        <a href="/blog/mythic-lite" class="launch-link">Launch</a>
      </div>
      <div class="module-card">
        <h3>Sliver Armoury</h3>
        <p>Explore operational modules like a full-stack offensive toolkit.</p>
        <a href="/blog/sliver-armoury" class="launch-link">Launch</a>
      </div>
    </div>
  </div>

  <script>
    const terminalOutput = document.getElementById("terminal-output");
    const container = document.querySelector(".container");
    const loadingScreen = document.getElementById("loading-screen");
    const themeToggle = document.getElementById("theme-toggle");

    const lines = [
      "[SYSTEM] Initializing H4ckronin blog…",
      "[ACCESS GRANTED] Welcome Operator"
    ];

    const highlightMap = {
      "[SYSTEM]":"#7fdfff",
      "[ACCESS GRANTED]":"#00FF41"
    };

    function sleep(ms){return new Promise(r=>setTimeout(r,ms));}

    async function typeLine(line, delay=35){
      for(let i=0;i<line.length;i++){
        terminalOutput.innerHTML += line[i];
        await sleep(delay);
      }
      for(const key in highlightMap){
        terminalOutput.innerHTML = terminalOutput.innerHTML.replace(
          key, `<span style="color:${highlightMap[key]}">${key}</span>`
        );
      }
      terminalOutput.innerHTML += "\n";
    }

    async function runTerminal(){
      for(let line of lines){
        await typeLine(line);
        await sleep(120);
      }
      const cursor = document.createElement("span");
      cursor.className="cursor";
      cursor.textContent="█";
      terminalOutput.appendChild(cursor);

      await sleep(800);
      loadingScreen.style.transition="opacity 0.8s";
      loadingScreen.style.opacity="0";
      setTimeout(()=>{
        loadingScreen.style.display="none";
        container.style.visibility="visible";
        localStorage.setItem("loadingDone","true");
      },800);
    }

    if(localStorage.getItem("loadingDone") === "true") {
      loadingScreen.style.display = "none";
      container.style.visibility = "visible";
    } else {
      runTerminal();
    }

    // Theme toggle
    function setTheme(mode) {
      document.documentElement.setAttribute('data-theme', mode);
      localStorage.setItem('theme', mode);
      themeToggle.textContent = mode === 'dark' ? '🌙' : '☀️';
    }

    themeToggle.addEventListener('click', () => {
      const current = localStorage.getItem('theme') || 'dark';
      setTheme(current === 'dark' ? 'light' : 'dark');
    });

    const savedTheme = localStorage.getItem('theme') || 'dark';
    setTheme(savedTheme);
  </script>
</body>
</html>
